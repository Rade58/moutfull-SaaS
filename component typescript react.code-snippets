{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }

	"My Typescript React Component": {
		"prefix": "tra1",
		"body": [
			"/** @jsx jsx */",
			"import { jsx } from \"theme-ui\";",
			"import { css } from \"@emotion/core\";",
			"import { FunctionComponent } from \"react\";",
			"import { gql, useQuery } from \"@apollo/react-hooks\";",
			"",
			"const ComponentName: FunctionComponent = () => {",
			"",
			"  return null;",
			"}",
			"",
			"export default ComponentName;"
		],
		"description": "My Typescript React Component"
	},

	"theme ui and emotion typescript": {
		"prefix": "tuemo",
		"body": [
			"/** @jsx jsx */",
			"import { jsx } from \"theme-ui\";",
			"import { FunctionComponent } from \"react\";",
			"import { css } from \"@emotion/core\";",
			"import styled from \"@emotion/styled\";",
			"",
			"const ComponentName: FunctionComponent = () => {",
			"  return null;",
			"};",
			"",
			"export default ComponentName;",
			""
		],
		"description": "theme ui and emotion"
	},
	"gatsby page typescript": {
		"prefix": "gpage",
		"body": [
			"import React, { FunctionComponent, useEffect } from \"react\";",
			"import { PageProps } from \"gatsby\";",
			"",
			"export interface QueriedDataI {",
			"  /* id?: string; */",
			"  /* body?: string; */",
			"  placeholder?: string;",
			"}",
			"",
			"export interface PageContextI {",
			"  placeholder?: string;",
			"}",
			"",
			"interface LocationStateI {",
			"  placeholder?: string;",
			"}",
			"",
			"const PageName: FunctionComponent<PageProps<",
			"  QueriedDataI,",
			"  PageContextI,",
			"  LocationStateI",
			">> = (props) => {",
			"  ",
			"  return null;",
			"};",
			"",
			"export default PageName;",
			""
		],
		"description": "theme ui and emotion"
	},
	"theme-ui pragma classic": {
		"prefix": "tuemo2",
		"body": [
			"/** @jsxRuntime classic */",
			"/** @jsx jsx */",
			"import { jsx } from \"theme-ui\";",
			"import { FunctionComponent } from \"react\";",
			"import { css } from \"@emotion/core\";",
			"import styled from \"@emotion/styled\";",
			"",
			"const Practice: FunctionComponent = () => {",
			"  return (",
			"    <div",
			"      css={css`",
			"        border: tomato solid 1px;",
			"        width: 100%;",
			"      `}",
			"    ></div>",
			"  );",
			"};",
			"",
			"export default Practice;"
		],
		"description": "theme-ui pragma classic"
	},
	"Acessible Svg React Typescript": {
		"prefix": "svg_accessible",
		"body": [
			"/** @jsxRuntime classic */",
			"/** @jsx jsx */",
			"import { jsx } from \"theme-ui\";",
			"import { FunctionComponent } from \"react\";",
			"import { css } from \"@emotion/core\";",
			"import styled from \"@emotion/styled\";",
			"",
			"const AccesibleSvg: FunctionComponent = () => {",
			"  return (",
			"    <svg",
			"      /* NO NEED FOR px ON width AND height */",
			"      width=\"\"",
			"      height=\"\"",
			"      aria-labelledby=\"your title id goes here\"",
			"      id=\"svg\"",
			"      role=\"presentation\" /* or role=\"imge\"*/",
			"      lang=\"en\"",
			"      xmlns=\"http://www.w3.org/2000/svg\"",
			"      xmlnsXlink=\"http://www.w3.org/1999/xlink\"",
			"      viewBox=\"0 0 380 210\"",
			"    >",
			"      <title id=\"reference this id by aria-labelledby\">",
			"        Your Title Goes here",
			"      </title>",
			"    </svg>",
			"  );",
			"};",
			"",
			"export default AccesibleSvg;",
			""
		],
		"description": "Acessible Svg React Typescript"
	},
	"next page typescript": {
		"prefix": "next_page",
		"body": [
			"/* eslint react/react-in-jsx-scope: 0 */",
			"/* eslint jsx-a11y/anchor-is-valid: 1 */",
			"import { FunctionComponent } from \"react\";",
			"",
			"const PageName: FunctionComponent = () => {",
			"  return (",
			"    <div>",
			"      ðŸ‘¾",
			"    </div>",
			"  );",
			"};",
			"",
			"export default PageName;",
			""
		],
		"description": "next page typescript"
	},
	"next component typescript": {
		"prefix": "next_component",
		"body": [
			"/* eslint jsx-a11y/anchor-is-valid: 1 */",
			"/** @jsxRuntime classic */",
			"/** @jsx jsx */",
			"import { jsx } from \"theme-ui\";",
			"import { FunctionComponent } from \"react\";",
			"import { css } from \"@emotion/core\";",
			"import styled from \"@emotion/styled\";",
			"",
			"const ComponentName: FunctionComponent = () => {",
			"  return null;",
			"};",
			"",
			"export default ComponentName;",
			""
		],
		"description": "next component typescript"
	},
	"platonic shapes svg react typescript": {
		"prefix": "svg_platonic-shapes",
		"body": [
			"/** @jsxRuntime classic */",
			"/** @jsx jsx */",
			"import { jsx } from \"theme-ui\";",
			"import { FunctionComponent } from \"react\";",
			"import { css } from \"@emotion/core\";",
			"import styled from \"@emotion/styled\";",
			"",
			"const Container = styled.div`",
			"  border: crimson solid 2px;",
			"  margin: 20px;",
			"  box-sizing: border-box;",
			"`;",
			"",
			"const PlatonicShapes: FunctionComponent = () => {",
			"  return (",
			"    <Container>",
			"      <svg",
			"        /* NO NEED FOR px ON width AND height */",
			"        width=\"\"",
			"        height=\"\"",
			"        aria-labelledby=\"platonic-shapes\"",
			"        id=\"moj_svg_1\"",
			"        role=\"presentation\"",
			"        lang=\"en\"",
			"        xmlns=\"http://www.w3.org/2000/svg\"",
			"        xmlnsXlink=\"http://www.w3.org/1999/xlink\"",
			"        viewBox=\"0 0 680 328\"",
			"      >",
			"        <title id=\"platonic-shapes\">Platonic shapes</title>",
			"        <g fill=\"#cfbcc3\" strokeWidth=\"4.8px\" stroke=\"#cc1d57\">",
			"          <rect x=\"10\" y=\"28\" width=\"110px\" height=\"80px\" />",
			"          <circle cx=\"220\" cy=\"220\" r=\"58px\" />",
			"          {/* points SU KOORINATE, POLIGON SE SAM ZATVAR */}",
			"          <polygon points=\"212,68 242,8 278,68 342,68 302, 108\" />",
			"          {/* LINIJA IMA DVE KOORDINATE ZA SVAKU TACKU x1 y1 x2 y2 */}",
			"          <line x1=\"442\" y1=\"12\" x2=\"442\" y2=\"128\" />",
			"          <line x1=\"542\" y1=\"12\" x2=\"588\" y2=\"128\" />",
			"        </g>",
			"      </svg>",
			"    </Container>",
			"  );",
			"};",
			"",
			"export default PlatonicShapes;",
			""
		],
		"description": "platonic shapes svg react typescript"
	},
	"next _app": {
		"prefix": "next _app",
		"body": [
			"import React from \"react\";",
			"import { AppProps } from \"next/app\";",
			"// import '../styles/globals.css'",
			"",
			"function MyApp({ Component, pageProps }: AppProps) {",
			"  return <Component {...pageProps} />;",
			"}",
			"",
			"export default MyApp;"
		],
		"description": "next _app"
	},
	"next _document": {
		"prefix": "next _document",
		"body": [
			"import Document, { Html, Head, Main, NextScript } from 'next/document'",
			"",
			"class MyDocument extends Document {",
			"  static async getInitialProps(ctx) {",
			"    const initialProps = await Document.getInitialProps(ctx)",
			"    return { ...initialProps }",
			"  }",
			"",
			"  render() {",
			"    return (",
			"      <Html>",
			"        <Head />",
			"        <body>",
			"          <Main />",
			"          <NextScript />",
			"        </body>",
			"      </Html>",
			"    )",
			"  }",
			"}",
			"",
			"export default MyDocument"
		],
		"description": "next _document"
	},
	"next page getServerSideProps": {
		"prefix": "next page get ss props",
		"body": [
			"/* eslint react/react-in-jsx-scope: 0 */",
			"/* eslint jsx-a11y/anchor-is-valid: 1 */",
			"import { FunctionComponent } from \"react\";",
			"// UVESCU, NEKE TYPE-OVE KOJI SE TICU getServerSideProps-A",
			"import { GetServerSideProps } from \"next\";",
			"",
			"interface PropsI {",
			"  placeholder: boolean;",
			"}",
			"",
			"const IndexPage: FunctionComponent<PropsI> = (props) => {",
			"  //",
			"",
			"  console.log(props);",
			"",
			"  return <div>ðŸ¦‰</div>;",
			"};",
			"",
			"export const getServerSideProps: GetServerSideProps<PropsI> = async (ctx) => {",
			" ",
			"",
			"  return {",
			"    props: {",
			"      placeholder: true,",
			"    },",
			"  };",
			"};",
			"",
			"export default IndexPage;",
			""
		],
		"description": "next page getServerSideProps"
	},
	"next _app getInitialProps": {
		"prefix": "next _app getInitialProps",
		"body": [
			"import React from \"react\";",
			"import App, { AppProps, AppContext } from \"next/app\";",
			"import \"bootstrap/dist/css/bootstrap.css\";",
			"import Header from \"../components/Header\";",
			"",
			"MyApp.getInitialProps = async (appCtx: AppContext) => {",
			"  const { ctx } = appCtx;",
			"",
			"  try {",
			"    // praksa je da na ovaj objekat",
			"    const appProps = await App.getInitialProps(appCtx);",
			"    ",
			"    // kacis na       `pageProps`    OBJEKAT",
			"     // OVDE SAM JA SMISLIO initialProps FIELD",
			"    appProps.pageProps.initialProps = {SOMETHING: \"ANYTHING\" }",
			"",
			"    return appProps;",
			"",
			"    //",
			"  } catch (err) {",
			"    console.log(err);",
			"    return {",
			"      pageProps: {",
			"        initialProps: {",
			"          errors: err.message as any,",
			"        },",
			"      },",
			"    };",
			"  }",
			"};",
			"",
			"// APP PAGE",
			"function MyApp({ Component: PageComponent, pageProps }: AppProps) {",
			"  ",
			"",
			"  ",
			"  // PORED TOGA STO SAM GA PROSLEDIO KAO PROP ZA HEADER",
			"  // ZELI MDA GA PROSLEDIM ZA SVAKI PAGE",
			"",
			"  return (",
			"    <div>",
			"      <Header currentUser={\"some user\"} /> ",
			"      <PageComponent something={\"anything\"} {...pageProps} />",
			"    </div>",
			"  );",
			"}",
			"",
			"export default MyApp;",
			""
		],
		"description": "next _app getInitialProps"
	},

	"next p gsp gsp": {
		"prefix": "next gsp gsp",
		"body": [
			"/* eslint react/react-in-jsx-scope: 0 */",
			"/* eslint jsx-a11y/anchor-is-valid: 1 */",
			"import { FunctionComponent } from \"react\";",
			"import { GetStaticPaths, GetStaticProps } from \"next\";",
			"import { useRouter } from \"next/router\";",
			"",
			"import { Box } from \"@chakra-ui/react\";",
			"",
			"import { getAllSites, getAllFeedback } from \"../../lib/db-admin\";",
			"",
			"interface FeedbackPagePropsI {",
			"  initialFeedback: any;",
			"}",
			"",
			"type paramsType = { siteId: string };",
			"",
			"export const getStaticPaths: GetStaticPaths<paramsType> = async (ctx) => {",
			"  const { sites } = await getAllSites();",
			"",
			"  const paths = sites.map((site: { id: string /*, ostalo */ }) => {",
			"    return {",
			"      params: {",
			"        siteId: site.id,",
			"      },",
			"    };",
			"  });",
			"",
			"  return {",
			"    paths: paths,",
			"    fallback: true,",
			"  };",
			"};",
			"",
			"export const getStaticProps: GetStaticProps<FeedbackPagePropsI, paramsType> =",
			"  async (ctx) => {",
			"    const { params } = ctx;",
			"",
			"    const { feedback } = await getAllFeedback(params?.siteId);",
			"",
			"    return {",
			"      props: {",
			"        initialFeedback: feedback,",
			"      },",
			"      revalidate: 1,",
			"    };",
			"  };",
			"",
			"const FeedbackPage: FunctionComponent<FeedbackPagePropsI> = ({",
			"  initialFeedback,",
			"}) => {",
			"  console.log({ initialFeedback });",
			"",
			"  const { query } = useRouter();",
			"",
			"  return <Box>Page ID: {query.siteId}</Box>;",
			"};",
			"",
			"export default FeedbackPage;",
			"",
			"// We use getStaticProps to fetch all the feedback for the site,",
			"//  given the siteId forwarded by the dynamic route.",
			"//  We forward that information to the component via a prop.",
			"",
			"// We use getStaticPaths to create a page for each site.",
			"//  If a page has not been created for a site (for example,",
			"//  a brand new site) and the user visits the route,",
			"//  we should generate the site on the fly.",
			"//  This is controlled by the fallback value of true.",
			"",
			"// We define a revalidation period of one second with revalidate.",
			"//  Every feedback page is built statically at build time.",
			"//  Then, when a request comes in after the revalidation period,",
			"//  getStaticProps is re-ran behind the scenes.",
			"//  If it completes successfully, the page is replaced",
			"//  and updated in the cache.",
			"//  This ensures you never have downtime and always serve",
			"//  a static HTML file.",
			""
		],
		"description": "next p gsp gsp"
	}


}